/*
 * Copyright (C) 2011-2018 Intel Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/* Enclave1.edl - Top EDL file. */

enclave
{
  include "sgx_dh.h"
  trusted
  {
    public void e1_init_session_initiator([out] sgx_status_t *dh_status);
    public void e1_init_session_responder([out] sgx_status_t *dh_status);
    public void e1_create_message1([in] sgx_dh_msg1_t *msg1, [out] sgx_status_t *dh_status);
    public void e1_process_message1([in] const sgx_dh_msg1_t *msg1,[out] sgx_dh_msg2_t *msg2,[out] sgx_status_t *dh_status);
    public void e1_process_message2([in] const sgx_dh_msg2_t *msg2, [out] sgx_dh_msg3_t *msg3, [out] sgx_status_t *dh_status);
    public void e1_process_message3([in] const sgx_dh_msg3_t *msg3,[out] sgx_status_t *dh_status);
    public void e1_show_secret_key(void);
    public sgx_status_t e1_encrypt_data(
      [in, size=plain_text_length] uint8_t* plain_text,
      uint32_t plain_text_length,
      [out, size=cipher_text_length] uint8_t* cipher_text,
      uint32_t cipher_text_length
    );
    public sgx_status_t e1_decrypt_data(
      [in, size=cipher_text_length] uint8_t *cipher_text,
      uint32_t cipher_text_length,
      [out, size=plain_text_length] uint8_t *plain_text,
      uint32_t plain_text_length
    );
    public sgx_status_t e1_seal_data(
      [in, size=data_size] char* data,
      size_t data_size
    );
    public sgx_status_t e1_unseal_data(
      [in, size=sealed_data_size] uint8_t* sealed_data, 
      size_t sealed_data_size,
      [in, size=32] const char* user_password
    );
    public sgx_status_t e1_update_password(
      [in, size=sealed_data_size] uint8_t* sealed_data, 
      size_t sealed_data_size,
      [in, string]const char* user_password, 
      [in, string]const char* new_password
    );
    public sgx_status_t e1_add_entry(
      [in, size=sealed_data_size] uint8_t* sealed_data, 
      size_t sealed_data_size,
      [in, size=entry_size] char* entry,
      size_t entry_size,
      [in, string] const char* filename,
      [in, string]const char* user_password
    );
  };
  untrusted
  {
    void ocall_e1_print_string([in, string] const char *str);
    int ocall_save_vault(
      [in, size=sealed_size]const uint8_t* sealed_data, 
      size_t sealed_size,
      [in, string]const char* filename
    );
    int ocall_load_vault(
      [in, size=unsealed_size]uint8_t* unsealed_data, 
      size_t unsealed_size
    );
  };
};
